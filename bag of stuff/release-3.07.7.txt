OmniThreadLibrary 3.07.7 has just been released. It is available via
GIT (https://github.com/gabr42/OmniThreadLibrary/tree/release-3.07.7)
or as a ZIP archive
(https://drive.google.com/file/d/1N4l0ftKr0n5BTEFoLlTy0r5BE5_TS2kA).

What is OmniThreadLibrary?
==========================

OmniThreadLibrary is simple to use threading library for Delphi. It's
main "selling" points (besides the price, of course are power,
simplicity, and openess. With just few lines of code, you can set up
multiple threads, send messages between them, process Windows messages
and more. OmniThreadLibrary doesn't limit you in any way - if it is not
powerfull enough for you, you can ignore any part of its "smartness"
and replace it with your own code. If you don't like working with
threads - no problem! You can use high-level primitives like parallel
for, futures and pipelines to introduce parallelism into your
application.

OmniThreadLibrary is an open source project. It lives in the Google
Code and is licensed under the BSD license.

At the moment, OmniThreadLibrary supports Delphi 2007, 2009, 2010, XE,
XE2, XE3, XE4, XE5, XE6, XE7, XE8, 10 Seattle, 10.1 Berlin, 10.2 Tokyo, 
and 10.3 Rio on the Win32 and Win64 platforms. 

There are no plans to support older Delphi compilers. XE2+ support 
is limited to Windows targets. Firemonkey is currently not supported.

Where can I get more information?
=================================

Home page: http://www.omnithreadlibrary.com/
Support: http://www.omnithreadlibrary.com/support/
Downloads: http://www.omnithreadlibrary.com/download/
Repository: https://github.com/gabr42/OmniThreadLibrary
Issue tracker: https://github.com/gabr42/OmniThreadLibrary/issues
Author's blog: http://thedelphigeek.com
Author's home page: http://primoz.gabrijelcic.org
Documentation: http://www.omnithreadlibrary.com/documentation/
Webinars: http://www.omnithreadlibrary.com/webinars.htm

Changes since version 3.07.6
============================

- New features:
  - [HHasenack] On XE3 and above, TOmniValue.CastTo<T> supports casting
    to an interface.
  - [HHasenack] Implemented Parallel.ForEach(IEnumerator<T>) and
    Parallel.ForEach(IEnumerable<T>).

- Bug fixes:
  - If additional wait objects registered with RegisterWaitObject were
    constantly signalled, timers were never called.
  - OtlParallel threads were incorrectly scheduled to the main pool 
    instead of GlobalParallelPool unless IOmniTaskConfig.ThreadPool
    was used. (introduced in 3.07.6)
  - Using Parallel.Join, .For, and .ForEach with .OnStopInvoke failed 
    with access violation if Join/For/ForEach was not executed 
    with .NoWait.
  - Thread pool creation code waits for thread pool management thread 
    to be started and initialized. Without that, CountQueued and 
    CountExecuting may not be initialized correctly when thread pool 
    creation code exits. [tnx to Roland Skinner]
--
Primoz
[http://thedelphigeek.com]